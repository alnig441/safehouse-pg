function dateParse(e){var n=e.slice(0,10),t=n.split("-"),l=["Jan","Feb","Mar","Apr","May","June","July","Aug","Sep","Oct","Nov","Dec"];return n=t[2]+" "+l[parseInt(t[1]-1)]+" "+t[0]}var app=angular.module("myApp",["ngRoute","ui.bootstrap","ngAnimate","ngFileUpload"]);app.config(function(e,n){n.html5Mode(!0),e.when("/login",{templateUrl:"views/login.html",controller:"loginCtrl"}).when("/admin",{templateUrl:"views/admin.html",controller:"adminCtrl"}).when("/priv_uk",{templateUrl:"views/priv_en.html",controller:"privUkCtrl"}).when("/priv_dk",{templateUrl:"views/priv_da.html",controller:"privDkCtrl"}).when("/public",{templateUrl:"views/public.html",controller:"publicCtrl"}).otherwise({redirectTo:"/login"})}),app.controller("loginCtrl",["$scope","$http","$location",function(e,n,t){console.log("in login ctrl "),e.submit=function(){console.log("loginCtrl - angular route",e.form),n.post("/login/authenticate",e.form).then(function(e){console.log(e),"admin"===e.data.acct_type?t.path("/admin"):"private"===e.data.acct_type&&"en"===e.data.lang?t.path("/priv_uk"):"private"===e.data.acct_type&&"da"===e.data.lang?t.path("/priv_dk"):"public"===e.data.acct_type?t.path("/public"):t.path("/login")})}}]),app.controller("adminCtrl",["$scope","$http","Upload","$timeout",function(e,n,t,l){var o=document.getElementsByTagName("form"),a=document.getElementById("viewAcct"),s=document.getElementById("viewEvent");e.showAddAcctForm=function(){console.log("show add form"),angular.element(a).css("display","none"),angular.element(s).css("display","none"),angular.element(o).css("display","none"),angular.element(o.addAcct).css("display","block")},e.addAcct=function(){console.log("adding acct ....",e),n.post("/admin_crud/add",e.form).then(function(e){var n=document.getElementById("alerts");angular.element(a).css("display","none"),console.log("in scope-add-acct logging response",e),angular.element(n).html(e.data)})},e.showDelAcctForm=function(){console.log("show delete form"),angular.element(a).css("display","none"),angular.element(s).css("display","none"),angular.element(o).css("display","none"),angular.element(o.delAcct).css("display","block")},e.viewAcct=function(){console.log("viewing acct ....",e.form.acct_type),n.get("/admin_crud/"+e.form.acct_type).then(function(n){var t=document.getElementById("alerts");console.log("in scope-delete-acct logging response",n.data),e.users=n.data,console.log(e.users),e.form.id=n.data.id,angular.element(t).html(n.data),angular.element(a).css("display","inline")})},e.delAcct=function(){console.log("deleting acct... ",this.user.username),n["delete"]("/admin_crud/"+this.user.username).then(function(n){var t=document.getElementById("alerts");console.log("printing response: ",n),angular.element(t).html(n.data),e.viewAcct()})},e.showChgPWForm=function(){console.log("show change pw form"),angular.element(a).css("display","none"),angular.element(s).css("display","none"),angular.element(o).css("display","none"),angular.element(o.chgPW).css("display","block")},e.chgPW=function(){console.log("changing pw for acct ",e.form.username),e.form.new_password===e.form.confirm_password?n.put("/admin_crud/chg",e.form).then(function(e){console.log("printing response in chgpw ",e);var n=document.getElementById("alerts");console.log("printing response: ",e),angular.element(n).html(e.data)}):angular.element(document.getElementById("alerts")).html("password mismatch")},e.showAddEventForm=function(){console.log("show add event form"),angular.element(a).css("display","none"),angular.element(s).css("display","none"),angular.element(o).css("display","none"),angular.element(o.addEvent).css("display","block")},e.addEvent=function(){e.form.url=document.getElementById("image").placeholder,n.post("/event_crud/add",e.form).then(function(e){console.log("image post response: ",e),angular.element(document.getElementById("alerts")).html(e.data)})},e.uploadFiles=function(n){e.f=n,n&&!n.$error&&(n.upload=t.upload({url:"/event_crud/upload",data:{file:n}}),n.upload.then(function(e){l(function(){n.result=e.data})},function(n){n.status>0&&(e.errorMsg=n.status+": "+n.data)}),n.upload.progress(function(e){n.progress=Math.min(100,parseInt(100*e.loaded/e.total))}))},e.showGetEventForm=function(){console.log("get event form"),angular.element(a).css("display","none"),angular.element(s).css("display","none"),angular.element(o).css("display","none"),angular.element(o.getEvent).css("display","block")},e.getEventById=function(){console.log("getting most recent event..."),angular.element(a).css("display","none"),angular.element(o).css("display","none");document.getElementById("latest");n.get("/event_crud/view").then(function(n){console.log("get event response ",n),e.form=n.data,e.form.created=dateParse(n.data.created),angular.element(s).css("display","block")})}}]),app.controller("privDkCtrl",["$scope","$http","$log","$modal",function(e,n,t,l){e.message="velkommen vandaler",e.animationsEnabled=!0,e.open=function(n){l.open({animation:e.animationsEnabled,templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",size:n,resolve:{events:function(){return e.event}}})}}]),app.controller("privUkCtrl",["$scope","$http","$log","$modal",function(e,n,t,l){e.message="welcome kilsythians",console.log(e),e.animationsEnabled=!0,e.open=function(n){l.open({animation:e.animationsEnabled,templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",size:n,resolve:{events:function(){return e.event}}})}}]),app.controller("ModalInstanceCtrl",function(e,n,t){e.temp="",t.get("/event_crud/view").then(function(n){console.log("hej der",n),e.event=n.data,e.event.created=dateParse(n.data.created),e.event.url="./images/"+n.data.url}),e.download=function(){console.log("in download",e.temp),t.get("/download/file/"+e.temp).then(function(e){console.log("download response ",e.data)})}}),app.controller("publicCtrl",["$scope","$http",function(e,n){e.message="velkommen til den offentlige afdeling"}]);
//# sourceMappingURL=data:application/json;base64,
